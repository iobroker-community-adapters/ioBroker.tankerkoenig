# GitHub Action Template: Automated Version Check and Update for ioBroker Copilot Instructions
# Version: 0.4.0
# 
# This action automatically checks for template updates and creates issues when updates are available
# Copy this to your repository as .github/workflows/check-copilot-template.yml

name: Check ioBroker Copilot Template Version

on:
  schedule:
    - cron: '23 3 * * 0'  # Weekly check optimized for off-peak hours (3:23 AM UTC Sunday)
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-template:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Dynamic template version check
        id: version-check
        run: |
          echo "üîç Starting dynamic ioBroker Copilot template version check..."
          
          # Get current version from local copilot instructions
          if [ -f ".github/copilot-instructions.md" ]; then
            CURRENT_VERSION=$(awk '/Version:|Template Version:/ {match($0, /([0-9]+(\.[0-9]+)*)/, arr); if (arr[1] != "") print arr[1]}' .github/copilot-instructions.md | head -1)
            if [ -z "$CURRENT_VERSION" ]; then CURRENT_VERSION="unknown"; fi
            echo "üìã Current local version: $CURRENT_VERSION"
          else
            CURRENT_VERSION="none"
            echo "‚ùå No .github/copilot-instructions.md file found"
          fi
          
          # Get latest version from centralized metadata
          echo "üåê Fetching latest template version from centralized config..."
          LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json | jq -r '.version' 2>/dev/null || echo "unknown")
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION="unknown"
          fi
          echo "üìã Latest available version: $LATEST_VERSION"
          
          # Determine repository status
          COPILOT_INITIALIZED="false"
          UPDATE_NEEDED="false"
          STATUS="unknown"
          
          if [ "$CURRENT_VERSION" = "none" ]; then
            STATUS="not_initialized"
            echo "üìã Status: Copilot instructions not found - initialization needed"
          elif [ "$CURRENT_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "unknown" ]; then
            STATUS="version_check_failed"
            echo "‚ö†Ô∏è  Status: Unable to determine version comparison"
          elif [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            STATUS="needs_update"
            UPDATE_NEEDED="true"
            echo "üìã Status: Update available ($CURRENT_VERSION ‚Üí $LATEST_VERSION)"
          else
            STATUS="up_to_date"
            echo "‚úÖ Status: Template is up to date ($CURRENT_VERSION)"
          fi
          
          if [ -f ".github/copilot-instructions.md" ]; then
            COPILOT_INITIALIZED="true"
          fi
          
          # Output results
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "update_needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "copilot_initialized=$COPILOT_INITIALIZED" >> $GITHUB_OUTPUT
          
      - name: Get repository info for issue creation
        id: repo-info
        if: steps.version-check.outputs.status != 'up_to_date'
        run: |
          # Get adapter name
          if [ -f "package.json" ]; then
            ADAPTER_NAME=$(jq -r '.name' package.json | sed 's/iobroker\.//')
          elif [ -f "io-package.json" ]; then
            ADAPTER_NAME=$(jq -r '.common.name' io-package.json)
          else
            ADAPTER_NAME="unknown"
          fi
          echo "adapter_name=$ADAPTER_NAME" >> $GITHUB_OUTPUT
          
      - name: Check for existing issues
        id: existing-issues
        if: steps.version-check.outputs.status != 'up_to_date'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.version-check.outputs.status }}';
            
            // Define issue titles to search for
            const searchTitles = [
              'ü§ñ Setup ioBroker GitHub Copilot Instructions',
              'üìã ioBroker Copilot Template Update Available',
              'Setup ioBroker GitHub Copilot Instructions', // Legacy format
              'ioBroker Copilot Template Update Available'   // Legacy format
            ];
            
            let existingIssue = null;
            
            // Search for existing open issues
            for (const title of searchTitles) {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });
              
              existingIssue = issues.data.find(issue => 
                issue.title.includes('Copilot') && 
                (issue.title.includes('Setup') || issue.title.includes('Update'))
              );
              
              if (existingIssue) break;
            }
            
            const hasExistingIssue = existingIssue !== null;
            const existingIssueNumber = existingIssue ? existingIssue.number : null;
            
            console.log(`Existing issue found: ${hasExistingIssue}`);
            if (hasExistingIssue) {
              console.log(`Existing issue number: ${existingIssueNumber}`);
              console.log(`Existing issue title: ${existingIssue.title}`);
            }
            
            core.setOutput('has_existing_issue', hasExistingIssue);
            core.setOutput('existing_issue_number', existingIssueNumber);
            
      - name: Create initialization issue
        if: steps.version-check.outputs.status == 'not_initialized' && steps.existing-issues.outputs.has_existing_issue == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const adapterName = '${{ steps.repo-info.outputs.adapter_name }}';
            const latestVersion = '${{ steps.version-check.outputs.latest_version }}';
            
            const issueTitle = `ü§ñ Setup ioBroker GitHub Copilot Instructions`;
            const issueBody = `# ü§ñ Automated ioBroker Copilot Instructions Setup

**GitHub Copilot**: Please help me set up GitHub Copilot instructions for my ioBroker adapter repository with full automation and validation.

## üîç Repository Analysis

**Detected Status**: \`not_initialized\` - No GitHub Copilot instructions found
- **Adapter Name**: ${adapterName}
- **Latest Template Version**: ${latestVersion}
- **Repository**: ioBroker adapter repository confirmed

## üéØ Automated Setup Required

**GitHub Copilot**: This repository needs initial setup of GitHub Copilot instructions. Please:

1. **Create \`.github/copilot-instructions.md\`** using the latest template:
   - **Template Source**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/template.md
   - **Remove**: Template comment block (\`<!-- TEMPLATE FILE -->\` section)
   - **Version**: Store \`${latestVersion}\` in the copilot instructions file
   - **Customize**: Add ${adapterName}-specific development patterns and context

2. **Setup Automated Workflows**:
   - **Version Check**: \`.github/workflows/check-copilot-template.yml\`
   - **Template Source**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/templates/ghAction-AutomatedVersionCheckAndUpdate.yml

## üìã Success Criteria

- ‚úÖ **File Created**: \`.github/copilot-instructions.md\` with latest template content
- ‚úÖ **Version Stored**: Template version ${latestVersion} in copilot instructions (NOT package.json)
- ‚úÖ **Workflow Added**: Automated version checking configured
- ‚úÖ **Customization**: Adapter-specific patterns included
- ‚úÖ **Template Integration**: Enhanced ioBroker development suggestions active

## ü§ñ Automation Details

- **Created**: \${new Date().toISOString()}
- **Template Version**: ${latestVersion}
- **Repository**: ${context.repo.owner}/${context.repo.repo}
- **Workflow**: Automated weekly template version checking enabled

**GitHub Copilot**: Please proceed with the automated setup using the centralized template and configuration system.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['copilot-setup', 'automation']
            });
            
            console.log('‚úÖ Created initialization issue');
            
      - name: Create update issue
        if: steps.version-check.outputs.status == 'needs_update' && steps.existing-issues.outputs.has_existing_issue == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const adapterName = '${{ steps.repo-info.outputs.adapter_name }}';
            const currentVersion = '${{ steps.version-check.outputs.current_version }}';
            const latestVersion = '${{ steps.version-check.outputs.latest_version }}';
            
            const issueTitle = `üìã ioBroker Copilot Template Update Available (${currentVersion} ‚Üí ${latestVersion})`;
            const issueBody = `# üìã ioBroker Copilot Template Update Available

**GitHub Copilot**: An updated template for ioBroker GitHub Copilot instructions is available.

## üîç Update Information

- **Current Version**: ${currentVersion}
- **Latest Version**: ${latestVersion}
- **Adapter**: ${adapterName}
- **Update Type**: Template enhancement/bug fixes

## üéØ Automated Update Process

**GitHub Copilot**: Please update the GitHub Copilot instructions:

1. **Update \`.github/copilot-instructions.md\`**:
   - **Latest Template**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/template.md
   - **Preserve Customizations**: Keep any \`[CUSTOMIZE]\` sections with ${adapterName}-specific content
   - **Update Version**: Change version to \`${latestVersion}\`
   - **Remove Template Comments**: Strip \`<!-- TEMPLATE FILE -->\` section

2. **Merge Strategy**:
   - Replace standard template sections with latest content
   - Preserve all custom adapter-specific additions
   - Maintain existing configuration and patterns
   - Keep custom sections unique to this adapter

## üìã Update Checklist

- [ ] **Template Updated**: Latest template content merged
- [ ] **Version Updated**: Version changed to ${latestVersion}
- [ ] **Customizations Preserved**: All ${adapterName}-specific content maintained
- [ ] **No Duplicates**: Custom content not duplicated with template
- [ ] **Functionality Verified**: Enhanced Copilot suggestions working

## ü§ñ Automation Details

- **Detected**: \${new Date().toISOString()}
- **Check Type**: Automated weekly version comparison
- **Template Source**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions
- **Configuration**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json

**GitHub Copilot**: Please proceed with the template update while preserving all existing customizations.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['template-update', 'automation']
            });
            
            console.log('‚úÖ Created update issue');
            
      - name: Handle version check failure
        if: steps.version-check.outputs.status == 'version_check_failed' && steps.existing-issues.outputs.has_existing_issue == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const currentVersion = '${{ steps.version-check.outputs.current_version }}';
            const latestVersion = '${{ steps.version-check.outputs.latest_version }}';
            
            const issueTitle = `‚ö†Ô∏è  ioBroker Copilot Template Version Check Failed`;
            const issueBody = `# ‚ö†Ô∏è  Template Version Check Failed

The automated version check for ioBroker Copilot template could not determine the current status.

## üîç Debug Information

- **Current Version Detected**: \`${currentVersion}\`
- **Latest Version Detected**: \`${latestVersion}\`
- **Status**: Unable to compare versions
- **Check Time**: \${new Date().toISOString()}

## üõ†Ô∏è  Manual Verification Required

Please manually check:

1. **Local File**: Verify \`.github/copilot-instructions.md\` exists and has a version number
2. **Remote Template**: Check if https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json is accessible
3. **Version Format**: Ensure version follows semantic versioning (x.y.z)

## üîß Resolution Steps

1. Check network connectivity to GitHub raw content
2. Verify local copilot-instructions.md file format
3. Consider manual template version comparison
4. Re-run this workflow after resolving issues

This issue was created by the automated version check system and should be investigated.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['bug', 'automation', 'version-check']
            });
            
            console.log('‚ö†Ô∏è  Created version check failure issue');
            
      - name: Log completion status
        run: |
          STATUS="${{ steps.version-check.outputs.status }}"
          HAS_EXISTING="${{ steps.existing-issues.outputs.has_existing_issue }}"
          
          echo "üîç Version Check Complete"
          echo "Status: $STATUS"
          echo "Current: ${{ steps.version-check.outputs.current_version }}"
          echo "Latest: ${{ steps.version-check.outputs.latest_version }}"
          echo "Has existing issue: $HAS_EXISTING"
          
          case "$STATUS" in
            "up_to_date")
              echo "‚úÖ Template is current - no action needed"
              ;;
            "not_initialized")
              if [ "$HAS_EXISTING" = "true" ]; then
                echo "‚ÑπÔ∏è  Initialization needed but issue already exists"
              else
                echo "üöÄ Created initialization issue"
              fi
              ;;
            "needs_update")
              if [ "$HAS_EXISTING" = "true" ]; then
                echo "‚ÑπÔ∏è  Update needed but issue already exists"
              else
                echo "üìã Created update issue"
              fi
              ;;
            "version_check_failed")
              if [ "$HAS_EXISTING" = "true" ]; then
                echo "‚ö†Ô∏è  Version check failed but issue already exists"
              else
                echo "üêõ Created failure investigation issue"
              fi
              ;;
            *)
              echo "‚ùì Unknown status: $STATUS"
              ;;
          esac